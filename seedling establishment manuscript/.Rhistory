}else{
sub <- filter(df, taxonID=='moss')
}
#empty dataFrame to hold results
out <- data.frame(site=ID,
numPlots=length(unique(sub$plotID)),
numMoss=nrow(sub),
meanMoss=mean(sub$percentCover),
result = ifelse(mean(sub$percentCover)>=20, 'sample', 'don\'t sample'))
print(out)
df <- read.csv(paste(myPathToData, '/div_', ID, '_merged.csv', sep=""), stringsAsFactors = F)
View(df)
grep(moss)%>%names(df)
grep(moss, df)%>%names(df)
contains('moss')%in%names(df))
contains('moss')%in%names(df)
library(dplyr)
contains('moss')%in%names(df)
'moss'%in%names(df)
ID='DEJU'
df <- read.csv(paste(myPathToData, '/div_', ID, '_merged.csv', sep=""), stringsAsFactors = F)
'moss'%in%names(df)
grep('moss')%in%names(df)
grepl('moss')%in%names(df)
grepl('moss',names(df))
df <- read.csv(paste(myPathToData, '/div_', ID, '_merged.csv', sep=""), stringsAsFactors = F)
if(grepl('moss',names(df)){
sub <- df%>%
select(siteID, plotID, grep(moss))%>%
rename(percentCover=grep(moss))
sub$taxonID <- 'moss'
}else{
sub <- filter(df, taxonID=='moss')
}
df <- read.csv(paste(myPathToData, '/div_', ID, '_merged.csv', sep=""), stringsAsFactors = F)
if(grepl('moss',names(df)){
if(grepl('moss',names(df))){
sub <- df%>%
select(siteID, plotID, grep(moss))%>%
rename(percentCover=grep(moss))
sub$taxonID <- 'moss'
}else{
sub <- filter(df, taxonID=='moss')
}
View(sub)
if(grepl('moss',names(df))){
sub <- df%>%
select(siteID, plotID, contains('moss'))%>%
rename(percentCover=grep(moss))
sub$taxonID <- 'moss'
}
View(sub)
sub <- select(df, siteID, plotID, contains("moss"))
View(sub)
sub <- filter(sub, !is.na(contains("moss")))
sub <- rename(df, percentCover = contains("moss"))
sub <- rename(df, percentCover = starts_with("moss"))
df <- read.csv(paste(myPathToData, '/div_', ID, '_merged.csv', sep=""), stringsAsFactors = F)
sub <- df%>%
select(siteID, plotID, percentCover=contains("moss"))
View(sub)
sub <- df%>%
select(siteID, plotID, percentCover=contains("moss"))%>%
filter(!is.na(percentCover))
sub
View(sub)
sub$taxonID <- 'moss'
View(sub)
df <- read.csv(paste(myPathToData, '/div_', ID, '_merged.csv', sep=""), stringsAsFactors = F)
if(grepl('moss',names(df))){
sub <- df%>%
select(siteID, plotID, percentCover=contains("moss"))%>%
filter(!is.na(percentCover))
sub$taxonID <- 'moss'
}else{
sub <- filter(df, taxonID=='moss')
}
#empty dataFrame to hold results
out <- data.frame(site=ID,
numPlots=length(unique(sub$plotID)),
numMoss=nrow(sub),
meanMoss=mean(sub$percentCover),
result = ifelse(mean(sub$percentCover)>=20, 'sample', 'don\'t sample'))
print(out)
numPlots=length(unique(sub$plotID))
numPlots
names(sub)
length(unique(sub$plotID))
sub$plotID
df <- read.csv(paste(myPathToData, '/div_', ID, '_merged.csv', sep=""), stringsAsFactors = F)
if(grepl('moss',names(df))){
sub <- df%>%
select(siteID, plotID, percentCover=contains("moss"))%>%
filter(!is.na(percentCover))
sub$taxonID <- 'moss'
}
names(df)
sub <- df%>%
select(siteID, plotID, percentCover=contains("moss"))%>%
filter(!is.na(percentCover))
View(sub)
grepl('moss',names(df))
grep('moss',names(df))
if(grepl('moss',names(df))){
sub <- df%>%
select(siteID, plotID, percentCover=contains("moss"))%>%
filter(!is.na(percentCover))
sub$taxonID <- 'moss'
}
View(sub)
df <- read.csv(paste(myPathToData, '/div_', ID, '_merged.csv', sep=""), stringsAsFactors = F)
rm(sub)
if(grepl('moss',names(df))){
sub <- df%>%
select(siteID, plotID, percentCover=contains("moss"))%>%
filter(!is.na(percentCover))
sub$taxonID <- 'moss'
}else{
sub <- filter(df, taxonID=='moss')
}
View(sub)
if(grepl('moss',names(df))){
sub <- df%>%
select(siteID, plotID, percentCover=contains("moss"))%>%
filter(!is.na(percentCover))
sub$taxonID <- 'moss'
}
sub <- df%>%
select(siteID, plotID, percentCover=contains("moss"))%>%
filter(!is.na(percentCover))
sub$taxonID <- 'moss'
View(sub)
'moss'%in%names(sub)
'plotID'%in%names(sub)
grepl('moss')%in%names(df)
View(df)
names(df)
'moss|moss...cover' %in% names(sub)
'moss|moss...cover' %in% names(df)
grepl('moss', names(df))
table(grepl('moss', names(df)))
all(grepl('moss', names(df)))
? all
any(grepl('moss', names(df)))
df <- read.csv(paste(myPathToData, '/div_', ID, '_merged.csv', sep=""), stringsAsFactors = F)
if(any(grepl('moss',names(df)))){
sub <- df%>%
select(siteID, plotID, percentCover=contains("moss"))%>%
filter(!is.na(percentCover))
sub$taxonID <- 'moss'
}else{
sub <- filter(df, taxonID=='moss')
}
View(sub)
df <- read.csv(paste(myPathToData, '/div_', ID, '_merged.csv', sep=""), stringsAsFactors = F)
if(any(grepl('moss',names(df)))){
sub <- df%>%
select(siteID, plotID, percentCover=contains("moss"))%>%
filter(!is.na(percentCover))
sub$taxonID <- 'moss'
}else{
sub <- filter(df, taxonID=='moss')
}
#empty dataFrame to hold results
out <- data.frame(site=ID,
numPlots=length(unique(sub$plotID)),
numMoss=nrow(sub),
meanMoss=mean(sub$percentCover),
result = ifelse(mean(sub$percentCover)>=20, 'sample', 'don\'t sample'))
print(out)
ID <- 'TREE'
mossCheck(ID)
mossCheck <- function(ID){
df <- read.csv(paste(myPathToData, '/div_', ID, '_merged.csv', sep=""), stringsAsFactors = F)
if(any(grepl('moss',names(df)))){
sub <- df%>%
select(siteID, plotID, percentCover=contains("moss"))%>%
filter(!is.na(percentCover))
sub$taxonID <- 'moss'
}else{
sub <- filter(df, taxonID=='moss')
}
#empty dataFrame to hold results
out <- data.frame(site=ID,
numPlots=length(unique(sub$plotID)),
numMoss=nrow(sub),
meanMoss=mean(sub$percentCover),
result = ifelse(mean(sub$percentCover)>=20, 'sample', 'don\'t sample'))
print(out)
}
ID <- 'TREE'
mossCheck(ID)
mossCheck(ID='HEAL')
mossCheck(ID='BARR')
mossCheck(ID='BARR')
moss <- function(ID){
df <- read.csv(paste(myPathToData, '/div_', ID, '_merged.csv', sep=""), stringsAsFactors = F)
sub <- filter(df, taxonID=='moss')
#empty dataFrame to hold results
out <- data.frame(site=character(ID),
numPlots=numeric(length(unique(sub$plotID))),
numMoss=numeric(nrow(sub))),
print(out)
}
\
mossCheck(ID='BARO')
ID <- 'BARO'
df <- read.csv(paste(myPathToData, '/div_', ID, '_merged.csv', sep=""), stringsAsFactors = F)
if(any(grepl('moss',names(df)))){
sub <- df%>%
select(siteID, plotID, percentCover=contains("moss"))%>%
filter(!is.na(percentCover))
sub$taxonID <- 'moss'
}else{
sub <- filter(df, taxonID=='moss')
}
#empty dataFrame to hold results
out <- data.frame(site=ID,
numPlots=length(unique(sub$plotID)),
numMoss=nrow(sub),
meanMoss=mean(sub$percentCover),
result = ifelse(mean(sub$percentCover)>=20, 'sample', 'don\'t sample'))
print(out)
if(out$result=='sample'){
print('yes')
}
if(any(grepl('moss',names(df)))){
sub <- df%>%
select(siteID, plotID, percentCover=contains("moss"))%>%
filter(!is.na(percentCover))
sub$taxonID <- 'moss'
}else{
sub <- filter(df, taxonID=='moss')
}
#empty dataFrame to hold results
out <- data.frame(site=ID,
numPlots=length(unique(sub$plotID)),
numMoss=nrow(sub),
meanMoss=mean(sub$percentCover),
result = ifelse(mean(sub$percentCover)>=20, 'sample', 'don\'t sample'))
print(out)
if(out$result=='sample'){
plots <- data.frame(plotID=sub$plotID)
print(plots)
}
View(sub)
View(df)
if(out$result=='sample'){
plots <- out%>%
group_by(plotID)%>%
summarise(meanMoss=mean(percentCover), result=ifelse(mean(percentCover)>=20,
'sample', 'don\'t sample'))
}
if(out$result=='sample'){
plots <- sub)%>%
group_by(plotID)%>%
summarise(meanMoss=mean(percentCover), result=ifelse(mean(percentCover)>=20,
'sample', 'don\'t sample'))
plots <- sub%>%
group_by(plotID)%>%
summarise(meanMoss=mean(percentCover), result=ifelse(mean(percentCover)>=20,
'sample', 'don\'t sample'))
plots
if(out$result=='sample'){
plots <- sub%>%
group_by(plotID)%>%
summarise(plotID, meanMoss=mean(percentCover), result=ifelse(mean(percentCover)>=20,
'sample', 'don\'t sample'))
}
plots <- sub%>%
group_by(plotID)%>%
summarise(plotID, meanMoss=mean(percentCover), result=ifelse(mean(percentCover)>=20,
'sample', 'don\'t sample'))
plots <- group_by(sub, plotID)
out2 <- summarise(plots, plotID, meanMoss=mean(percentCover),
result=ifelse(mean(percentCover)>=20, 'sample', 'don\'t sample'))
plots
plots <- sub%>%
group_by(plotID)%>%
summarise(meanMoss=mean(percentCover))
plots
plots <- sub%>%
group_by(plotID)%>%
summarise(meanMoss=mean(percentCover)
)
plots <- sub%>%
group_by(plotID, taxonID)%>%
summarise(meanMoss=mean(percentCover)
)
plots
plots <- group_by(sub, plotID)
out2 <- summarize(plots, meanMoss=mean(percentCover),
result=ifelse(mean(percentCover)>=20, 'sample', 'don\'t sample'))
out2
View(sub)
plots <- group_by(sub, plotID)
plots
out2 <- summarise(plots, count=n())
out2 <- summarise(plots, count=n(taxonID))
out2 <- summarise(plots, count=nrow())
out2 <- summarise(plots, count=nrow(plotID))
out2
class(sub)
df <- tbl_df(df)
if(any(grepl('moss',names(df)))){
sub <- df%>%
#rename 'moss' field to percentCover
select(siteID, plotID, percentCover=contains("moss"))%>%
# remove rows with no moss data
filter(!is.na(percentCover))
#create taxonID = moss
sub$taxonID <- 'moss'
}else{
sub <- filter(df, taxonID=='moss')
}
class(sub)
plots <- group_by(sub, plotID)
out2 <- summarize(plots, meanMoss=mean(percentCover),
result=ifelse(mean(percentCover)>=20, 'sample', 'don\'t sample'))
out2
plots
out2 <- summarize(plots, count=n()
)
class(plots)
library(dplyr)
luor <- read.csv('C:/Users/kjones/Documents/GitHub/kjones13/seedling establishment manuscript/LUOR4r.csv',
stringsAsFactors = F)
attach(luor)
library(dplyr)
#luor<-read.csv('LUOR4r.csv')
attach(luor)
site.code<-ifelse(Site=="Bellfountain",1,0)
site.code2<-ifelse(Site=="Pigeon Butte",2,0)
site.code3<-site.code+site.code2
########### Figure 5 - pg 14
luor.ns<-luor[which(luor$Scarified=='n'),]
detach(luor)
attach(luor.ns)
setEPS()
postscript(filename="figure5-LUORestab.eps", res=300, width=900, height=900,
units="px", compression = "lzw")
plot(LUOR2010~LD2010, ylim=c(0,60), xlim=c(0,8), pch=(site.code3+1),
xlab= "Litter Depth (cm)", ylab="Establishment (%)")
bf.ns.estab<-lm(LUOR2010 ~ LD2010, subset=(Site=="Bellfountain"))
abline(bf.ns.estab, col="black", lwd=2)
pb.ns.estab<-lm(LUOR2010 ~ LD2010, subset=(Site=="Pigeon Butte"))
abline(pb.ns.estab, col="black", lwd=2, lty=2)
fh.ns.estab<-lm(LUOR2010 ~ LD2010, subset=(Site=="Ft. Hoskins"))
abline(fh.ns.estab, col="black", lwd=2, lty=4)
legend("bottomright", inset=.05, legend=c("Bellfountain", "Pigeon Butte",
"Ft. Hoskins"), merge=F, col=c("black"), pch=c(2,1,3), pt.cex=1.5,
cex=.9, pt.lwd=1.5, lty=c(1,2,4), lwd=c(1.5))
dev.off()
iff(filename="figure5-LUORestab.tif", res=200, width=900, height=900,
units="px", compression = "lzw")
plot(LUOR2010~LD2010, ylim=c(0,60), xlim=c(0,8), pch=(site.code3+1),
xlab= "Litter Depth (cm)", ylab="Establishment (%)")
bf.ns.estab<-lm(LUOR2010 ~ LD2010, subset=(Site=="Bellfountain"))
abline(bf.ns.estab, col="black", lwd=2)
pb.ns.estab<-lm(LUOR2010 ~ LD2010, subset=(Site=="Pigeon Butte"))
abline(pb.ns.estab, col="black", lwd=2, lty=2)
fh.ns.estab<-lm(LUOR2010 ~ LD2010, subset=(Site=="Ft. Hoskins"))
abline(fh.ns.estab, col="black", lwd=2, lty=4)
legend("bottomright", inset=.05, legend=c("Bellfountain", "Pigeon Butte",
"Ft. Hoskins"), merge=F, col=c("black"), pch=c(2,1,3), pt.cex=1.5,
cex=.9, pt.lwd=1.5, lty=c(1,2,4), lwd=c(1.5))
dev.off()
luor <- read.csv('C:/Users/kjones/Documents/GitHub/kjones13/seedling establishment manuscript/LUOR4r.csv',
stringsAsFactors = F)
attach(luor)
library(dplyr)
#luor<-read.csv('LUOR4r.csv')
attach(luor)
tiff(filename="figure5-LUORestab.tif", res=200, width=900, height=900,
units="px", compression = "lzw")
plot(LUOR2010~LD2010, ylim=c(0,60), xlim=c(0,8), pch=(site.code3+1),
xlab= "Litter Depth (cm)", ylab="Establishment (%)")
bf.ns.estab<-lm(LUOR2010 ~ LD2010, subset=(Site=="Bellfountain"))
abline(bf.ns.estab, col="black", lwd=2)
pb.ns.estab<-lm(LUOR2010 ~ LD2010, subset=(Site=="Pigeon Butte"))
abline(pb.ns.estab, col="black", lwd=2, lty=2)
fh.ns.estab<-lm(LUOR2010 ~ LD2010, subset=(Site=="Ft. Hoskins"))
abline(fh.ns.estab, col="black", lwd=2, lty=4)
legend("bottomright", inset=.05, legend=c("Bellfountain", "Pigeon Butte",
"Ft. Hoskins"), merge=F, col=c("black"), pch=c(2,1,3), pt.cex=1.5,
cex=.9, pt.lwd=1.5, lty=c(1,2,4), lwd=c(1.5))
dev.off()
luor.ns<-luor[which(luor$Scarified=='n'),]
detach(luor)
View(luor)
luor.ns<-luor[which(luor$Scarified=='No'),]
detach(luor)
attach(luor.ns)
tiff(filename="figure5-LUORestab.tif", res=200, width=900, height=900,
units="px", compression = "lzw")
plot(LUOR2010~LD2010, ylim=c(0,60), xlim=c(0,8), pch=(site.code3+1),
xlab= "Litter Depth (cm)", ylab="Establishment (%)")
bf.ns.estab<-lm(LUOR2010 ~ LD2010, subset=(Site=="Bellfountain"))
abline(bf.ns.estab, col="black", lwd=2)
pb.ns.estab<-lm(LUOR2010 ~ LD2010, subset=(Site=="Pigeon Butte"))
abline(pb.ns.estab, col="black", lwd=2, lty=2)
fh.ns.estab<-lm(LUOR2010 ~ LD2010, subset=(Site=="Ft. Hoskins"))
abline(fh.ns.estab, col="black", lwd=2, lty=4)
legend("bottomright", inset=.05, legend=c("Bellfountain", "Pigeon Butte",
"Ft. Hoskins"), merge=F, col=c("black"), pch=c(2,1,3), pt.cex=1.5,
cex=.9, pt.lwd=1.5, lty=c(1,2,4), lwd=c(1.5))
dev.off()
tiff(filename="figure5-LUORestab.tif", res=200, width=900, height=900,
units="px", compression = "lzw")
plot(LUOR2010~LD2010, ylim=c(0,60), xlim=c(0,8), pch=(site.code3+1),
xlab= "Litter Depth (cm)", ylab="Establishment (%)")
bf.ns.estab<-lm(LUOR2010 ~ LD2010, subset=(Site=="Bellfountain"))
abline(bf.ns.estab, col="black", lwd=2)
pb.ns.estab<-lm(LUOR2010 ~ LD2010, subset=(Site=="Pigeon Butte"))
abline(pb.ns.estab, col="black", lwd=2, lty=2)
fh.ns.estab<-lm(LUOR2010 ~ LD2010, subset=(Site=="Ft. Hoskins"))
abline(fh.ns.estab, col="black", lwd=2, lty=4)
legend("bottomright", inset=.05, legend=c("Bellfountain", "Pigeon Butte",
"Ft. Hoskins"), merge=F, col=c("black"), pch=c(2,1,3), pt.cex=1.5,
cex=.9, pt.lwd=1.5, lty=c(1,2,4), lwd=c(1.5))
dev.off()
getwd()
setwd(paste(getwd, 'GitHub/kjones13', sep=''))
setwd('C:/Users/kjones/Documents/GitHub/kjones13')
getwd()
tiff(filename="figure5-LUORestab.tif", res=160, width=900, height=900,
units="px", compression = "lzw")
plot(LUOR2010~LD2010, ylim=c(0,60), xlim=c(0,8), pch=(site.code3+1),
xlab= "Litter Depth (cm)", ylab="Establishment (%)")
bf.ns.estab<-lm(LUOR2010 ~ LD2010, subset=(Site=="Bellfountain"))
abline(bf.ns.estab, col="black", lwd=2)
pb.ns.estab<-lm(LUOR2010 ~ LD2010, subset=(Site=="Pigeon Butte"))
abline(pb.ns.estab, col="black", lwd=2, lty=2)
fh.ns.estab<-lm(LUOR2010 ~ LD2010, subset=(Site=="Ft. Hoskins"))
abline(fh.ns.estab, col="black", lwd=2, lty=4)
legend("bottomright", inset=.05, legend=c("Bellfountain", "Pigeon Butte",
"Ft. Hoskins"), merge=F, col=c("black"), pch=c(2,1,3), pt.cex=1.5,
cex=.9, pt.lwd=1.5, lty=c(1,2,4), lwd=c(1.5))
dev.off()
tiff(filename="figure5-LUORestab.tif", res=160, width=900, height=900,
units="px", compression = "lzw")
plot(LUOR2010~LD2010, ylim=c(0,60), xlim=c(0,8), pch=(site.code3+1),
xlab= "Litter Depth (cm)", ylab="Establishment (%)")
bf.ns.estab<-lm(LUOR2010 ~ LD2010, subset=(Site=="Bellfountain"))
abline(bf.ns.estab, col="black", lwd=2)
pb.ns.estab<-lm(LUOR2010 ~ LD2010, subset=(Site=="Pigeon Butte"))
abline(pb.ns.estab, col="black", lwd=2, lty=2)
fh.ns.estab<-lm(LUOR2010 ~ LD2010, subset=(Site=="Ft. Hoskins"))
abline(fh.ns.estab, col="black", lwd=2, lty=4)
legend("bottomright", inset=.05, legend=c("Bellfountain", "Pigeon Butte",
"Ft. Hoskins"), merge=F, col=c("black"), pch=c(2,1,3), pt.cex=1.5,
cex=.9, pt.lwd=1.5, lty=c(1,2,4), lwd=c(1.5))
dev.off()
setwd('C:/Users/kjones/Documents/GitHub/kjones13/seedling establishment manuscript')
tiff(filename="figure5-LUORestab.tif", res=160, width=900, height=900,
units="px", compression = "lzw")
plot(LUOR2010~LD2010, ylim=c(0,60), xlim=c(0,8), pch=(site.code3+1),
xlab= "Litter Depth (cm)", ylab="Establishment (%)")
bf.ns.estab<-lm(LUOR2010 ~ LD2010, subset=(Site=="Bellfountain"))
abline(bf.ns.estab, col="black", lwd=2)
pb.ns.estab<-lm(LUOR2010 ~ LD2010, subset=(Site=="Pigeon Butte"))
abline(pb.ns.estab, col="black", lwd=2, lty=2)
fh.ns.estab<-lm(LUOR2010 ~ LD2010, subset=(Site=="Ft. Hoskins"))
abline(fh.ns.estab, col="black", lwd=2, lty=4)
legend("bottomright", inset=.05, legend=c("Bellfountain", "Pigeon Butte",
"Ft. Hoskins"), merge=F, col=c("black"), pch=c(2,1,3), pt.cex=1.5,
cex=.9, pt.lwd=1.5, lty=c(1,2,4), lwd=c(1.5))
dev.off()
tiff(filename="figure5-LUORestab.tif", res=160, width=900, height=900,
units="px", compression = "lzw")
plot(LUOR2010~LD2010, ylim=c(0,60), xlim=c(0,7), pch=(site.code3+1),
xlab= "Litter Depth (cm)", ylab="Establishment (%)")
bf.ns.estab<-lm(LUOR2010 ~ LD2010, subset=(Site=="Bellfountain"))
abline(bf.ns.estab, col="black", lwd=2)
pb.ns.estab<-lm(LUOR2010 ~ LD2010, subset=(Site=="Pigeon Butte"))
abline(pb.ns.estab, col="black", lwd=2, lty=2)
fh.ns.estab<-lm(LUOR2010 ~ LD2010, subset=(Site=="Ft. Hoskins"))
abline(fh.ns.estab, col="black", lwd=2, lty=4)
legend("bottomright", inset=.05, legend=c("Bellfountain", "Pigeon Butte",
"Ft. Hoskins"), merge=F, col=c("black"), pch=c(2,1,3), pt.cex=1.5,
cex=.9, pt.lwd=1.5, lty=c(1,2,4), lwd=c(1.5))
dev.off()
setEPS()
postscript(filename="figure5-LUORestab.eps", res=160, width=900, height=900,
units="px", compression = "lzw")
plot(LUOR2010~LD2010, ylim=c(0,60), xlim=c(0,7), pch=(site.code3+1),
xlab= "Litter Depth (cm)", ylab="Establishment (%)")
bf.ns.estab<-lm(LUOR2010 ~ LD2010, subset=(Site=="Bellfountain"))
abline(bf.ns.estab, col="black", lwd=2)
pb.ns.estab<-lm(LUOR2010 ~ LD2010, subset=(Site=="Pigeon Butte"))
abline(pb.ns.estab, col="black", lwd=2, lty=2)
fh.ns.estab<-lm(LUOR2010 ~ LD2010, subset=(Site=="Ft. Hoskins"))
abline(fh.ns.estab, col="black", lwd=2, lty=4)
legend("bottomright", inset=.05, legend=c("Bellfountain", "Pigeon Butte",
"Ft. Hoskins"), merge=F, col=c("black"), pch=c(2,1,3), pt.cex=1.5,
cex=.9, pt.lwd=1.5, lty=c(1,2,4), lwd=c(1.5))
dev.off()
setEPS()
postscript(filename="figure5-LUORestab.eps")
postscript("figure5-LUORestab.eps")
plot(LUOR2010~LD2010, ylim=c(0,60), xlim=c(0,7), pch=(site.code3+1),
xlab= "Litter Depth (cm)", ylab="Establishment (%)")
bf.ns.estab<-lm(LUOR2010 ~ LD2010, subset=(Site=="Bellfountain"))
abline(bf.ns.estab, col="black", lwd=2)
pb.ns.estab<-lm(LUOR2010 ~ LD2010, subset=(Site=="Pigeon Butte"))
abline(pb.ns.estab, col="black", lwd=2, lty=2)
fh.ns.estab<-lm(LUOR2010 ~ LD2010, subset=(Site=="Ft. Hoskins"))
abline(fh.ns.estab, col="black", lwd=2, lty=4)
legend("bottomright", inset=.05, legend=c("Bellfountain", "Pigeon Butte",
"Ft. Hoskins"), merge=F, col=c("black"), pch=c(2,1,3), pt.cex=1.5,
cex=.9, pt.lwd=1.5, lty=c(1,2,4), lwd=c(1.5))
dev.off()

chooseCRANmirror()
chooseCRANmirror()
library(Sleuth2)
local({pkg <- select.list(sort(.packages(all.available = TRUE)))
if(nchar(pkg)) library(pkg, character.only=TRUE)})
utils:::menuInstallPkgs()
library(Sleuth2)
help(package=Sleuth2)
data(ex0112)
ex0112
data(case0101)
case0101
treat.random<-sample(Treatment)
hist(Score)
attach(case0101)
hist(Score)
hist(Treatment)
treat.random<-sample(Treatment)
ex0101
case0101
treat.random<-sample(Treatment)
mean(treat.random[1:23])-mean(treat.random[24:47])
score.random<-sample(Score)
mean(score.random[1:23])-mean(score.random[24:47])
mean(score.random[1:23])-mean(score.random[24:47])
mean(score.random[1:23])-mean(score.random[24:47])
summary(Score[Treatment=='Intrinsic'])
summary(Score[Treatment=='Extrinsic'])
help(random)
help(??random)
random
score.random<-sample(Score)
score.random
score.random
mean(score.random[1:23])-mean(score.random[24:47])
score.random
mean(score.random[1:23])-mean(score.random[24:47])
score.random<-sample(Score)
mean(score.random[1:23])-mean(score.random[24:47])
score.random<-sample(Score)
mean(score.random[1:23])-mean(score.random[24:47])
score.random<-sample(Score)
mean(score.random[1:23])-mean(score.random[24:47])
score.random<-sample(Score)
mean(score.random[1:23])-mean(score.random[24:47])
score.random<-sample(Score)
mean(score.random[1:23])-mean(score.random[24:47])
mean(score[1:23])-mean(score[24:47])
mean(Score[1:23])-mean(Score[24:47])
detatch (case0101)
detach(case0101)
data(ex0112)
attach(ex0112)
ex0112
case0101
boxplot(BP[Diet=='fishoil'])
win.graph
win.graph()
boxplot(BP[Diet=='regularoil'])
boxplot(BP~Diet)
library(Sleuth2)
help(package=Sleuth2)
data(ex0112)
case0102
help(package=Sleuth2)
data(ex0112)
ex0112
attach(ex0112) # Attach the data frame.
boxplot(BP~Diet)
boxplot(BP~Diet,ylab='Assigned Diet',xlab='Blood Pressure',main='Affects of Fish Oil Diet on Blood Pressure in Males with Hypertension')
stem(BP[Diet=='regularoil'])
stem(BP~Diet)
stem(BP[Diet=='regularoil',Diet=='fishoil'])
stem(BP[Diet=='fishoil'])
help(stem)
boxplot(BP~Diet,ylab='Reduction in Diastolic Blood Pressure',xlab='Assigned Dier',main='Affects of Fish Oil Diet on Blood Pressure in Males with Hypertension')
boxplot(BP~Diet,ylab='Reduction in Diastolic Blood Pressure',xlab='Assigned Diet',main='Affects of Fish Oil Diet on Blood Pressure in Males with Hypertension')
summary(BP[Diet==fishoil'])
summary(BP[Diet=='fishoil'])
summary(BP[Diet=='fishoil'])
summary(BP[Diet=='regularoil'])
detach(ex0112)
n<-as.matrix(c(21,34,20,25,7,82,48),7,1)
n
1/n
M<-qtukey(0.95,7,230)/sqrt(2)
M
kronecker(1/n,matrix(1,1,7))
kronecker(t(1/n),matrix(1,7,1))
2.974629*6.863122
qf(0.95,7,230)
M<- sqrt(4*qf(0.95,7,230)
M<- sqrt(4*qf(0.95,7,230))
M<-sqrt(4*qf(0.95,7,230))
M
M<-sqrt(6*qf(0.95,7,230))
M
qt(.95/(2*21),230)
M<-qt(.95/(2*21),230)
M
(25.1+22.7+39.6)/3
(-4.24+1.88+4.98)/3
(-2.79+2.22+1.27)/3
-6.98-0.873333-0.233333
0^2
-6.98-((-4.24+1.88+4.98)/3)-((-2.79+2.22+1.27)/3)
(1/21)+(((-1/3)^2)/34)+(((1/3)^2)/82)+(((1/3)^2)/48)+(((-1/3)^2)/20)+(((1/3)^2)/25)+(((1/3)^2)/7)
11.72*sqrt((1/21)+(((-1/3)^2)/34)+(((1/3)^2)/82)+(((1/3)^2)/48)+(((-1/3)^2)/20)+(((1/3)^2)/25)+(((1/3)^2)/7))
qt(.975,230)
-8.086666+(qt(.975,230))*(11.72*sqrt((1/21)+(((-1/3)^2)/34)+(((1/3)^2)/82)+(((1/3)^2)/48)+(((-1/3)^2)/20)+(((1/3)^2)/25)+(((1/3)^2)/7)))
-8.086666-(qt(.975,230))*(11.72*sqrt((1/21)+(((-1/3)^2)/34)+(((1/3)^2)/82)+(((1/3)^2)/48)+(((-1/3)^2)/20)+(((1/3)^2)/25)+(((1/3)^2)/7)))
library(Sleuth2)
ex0328.queen<-ex0328[Bee=='Queen',]
attach(ex0328)
ex0328.queen<-ex0328[Bee=='Queen',]
attach(ex0328.queen)
summary(ex0328.queen)
names(ex0328)
ex0328.queen.lm<-lm(Removed~Duration)
names(ex0328.queen.lm)
plot(Removed~Duration)
ex0328.queen.lm$coefficients
plot(Removed~Duration,main='Duration of visit vs. pollen removed by Queen Bees')
abline(ex0328.queen.lm$coefficients)
abline(ex0328.queen.lm$coefficients)
win.graph()
ex0328.queen.lm$residuals
plot(ex0328.queen.lm,which=1)   ### 1=residuals plot
abline(ex0328.queen.lm$residuals)
win.graph()
log.duration<-log(Duration)
log.removed<-log(Removed)
plot(log.removed~Duration)
ex0328.queen.logD.lm,-lm(Removed~log(Duration))
ex0328.queen.logD.lm<-lm(Removed~log(Duration))
abline(ex0328.queen.logD.lm$coefficients)
plot(log.removed~Duration)
plot(Removed~log.duration)
win.graph()
plot(log.removed~log.duration)
win.graph()
plot(log.removed~Duration, which=1)
win.graph()
plot(Removed~log.duration, which=1)
win.graph()
plot(log.removed~log.duration, which=1)
Removed~log.duration
plot(ex0328.queen.logD.lm, which=1)
plot(ex0328.queen.logD.lm, which=1)
ex0328.queen.logR.lm<-(log(Removed)~Duration)
ex0328.queen.logRD.lm<-(log(Removed)~log(Duration))
win.graph()
plot(ex0328.queen.logD.lm, which=1)
win.graph()
plot(ex0328.queen.logD.lm, which=1)
win.graph()
plot(ex0328.queen.logRD.lm, which=1)
plot(ex0328.queen.logD.lm,which=1)
win.graph()
plot(ex0328.queen.logD.lm,which=1)
win.graph()
plot(ex0328.queen.logR.lm,which=1)
ex0328.queen.logR.lm<-lm(log(Removed)~Duration)
plot(ex0328.queen.logR.lm,which=1)
ex0328.queen.logRD.lm<-lm(log(Removed)~log(Duration))
win.graph()
plot(ex0328.queen.logRD.lm,which=1)
win.graph()
plot(ex0328.queen.logD.lm,which=1)
plot(ex0328.queen.lm)
ex0328.queen.lm<-lm(Removed~Duration, subset=Duration<31)
plot(Removed~Duration, subset<31)
plot(Removed~Duration,subset<31)
plot(Removed~Duration)
ex0328.queen2.lm<-lm(Removed~Duration, subset=Duration<31)
abline(ex0328.queen2.lm$coefficients)
summary((ex0328.queen2.lm)
summary(ex0328.queen2.lm)
summary(ex0328.queen2.lm)
install.packages("multcomp")
demo()
demo(stats=.smooth)
demo(smooth)
require(graphics)
summary(fm1 <- aov(breaks ~ wool + tension, data = warpbreaks))
TukeyHSD(fm1, "tension", ordered = TRUE)
plot(TukeyHSD(fm1, "tension"))
if(interactive())
curve(ptukey(x, nm = 6, df = 5), from = -1, to = 8, n = 101)
(qtt <- qtukey(.95, 2, df =  2:11))
## The precision may be not much more than about 8 digits:
summary(abs(.95 - ptukey(qtt, 2, df = 2:11)))
### multiple linear model, swiss data
lmod <- lm(Fertility ~ ., data = swiss)
### test of H_0: all regression coefficients are zero
### (ignore intercept)
### define coefficients of linear function directly
K <- diag(length(coef(lmod)))[-1,]
rownames(K) <- names(coef(lmod))[-1]
K
### set up general linear hypothesis
glht(lmod, linfct = K)
### alternatively, use a symbolic description
### instead of a matrix
glht(lmod, linfct = c("Agriculture = 0",
"Examination = 0",
"Education = 0",
"Catholic = 0",
"Infant.Mortality = 0"))
### multiple comparison procedures
### set up a one-way ANOVA
amod <- aov(breaks ~ tension, data = warpbreaks)
### set up all-pair comparisons for factor `tension'
### using a symbolic description (`type' argument
### to `contrMat()')
glht(amod, linfct = mcp(tension = "Tukey"))
### alternatively, describe differences symbolically
glht(amod, linfct = mcp(tension = c("M - L = 0",
"H - L = 0",
"H - M = 0")))
### alternatively, define contrast matrix directly
contr <- rbind("M - L" = c(-1, 1, 0),
"H - L" = c(-1, 0, 1),
"H - M" = c(0, -1, 1))
glht(amod, linfct = mcp(tension = contr))
### alternatively, define linear function for coef(amod)
### instead of contrasts for `tension'
### (take model contrasts and intercept into account)
glht(amod, linfct = cbind(0, contr %*% contr.treatment(3)))
### mix of one- and two-sided alternatives
warpbreaks.aov <- aov(breaks ~ wool + tension,
data = warpbreaks)
### contrasts for `tension'
K <- rbind("L - M" = c( 1, -1,  0),
"M - L" = c(-1,  1,  0),
"L - H" = c( 1,  0, -1),
"M - H" = c( 0,  1, -1))
warpbreaks.mc <- glht(warpbreaks.aov,
linfct = mcp(tension = K),
alternative = "less")
### correlation of first two tests is -1
cov2cor(vcov(warpbreaks.mc))
### use smallest of the two one-sided
### p-value as two-sided p-value -> 0.0232
summary(warpbreaks.mc)
library("multcomp", lib.loc="C:/Users/Katie Jones/Documents/R/win-library/3.0")
### multiple linear model, swiss data
lmod <- lm(Fertility ~ ., data = swiss)
### test of H_0: all regression coefficients are zero
### (ignore intercept)
### define coefficients of linear function directly
K <- diag(length(coef(lmod)))[-1,]
rownames(K) <- names(coef(lmod))[-1]
K
### set up general linear hypothesis
glht(lmod, linfct = K)
### alternatively, use a symbolic description
### instead of a matrix
glht(lmod, linfct = c("Agriculture = 0",
"Examination = 0",
"Education = 0",
"Catholic = 0",
"Infant.Mortality = 0"))
### multiple comparison procedures
### set up a one-way ANOVA
amod <- aov(breaks ~ tension, data = warpbreaks)
### set up all-pair comparisons for factor `tension'
### using a symbolic description (`type' argument
### to `contrMat()')
glht(amod, linfct = mcp(tension = "Tukey"))
### alternatively, describe differences symbolically
glht(amod, linfct = mcp(tension = c("M - L = 0",
"H - L = 0",
"H - M = 0")))
### alternatively, define contrast matrix directly
contr <- rbind("M - L" = c(-1, 1, 0),
"H - L" = c(-1, 0, 1),
"H - M" = c(0, -1, 1))
glht(amod, linfct = mcp(tension = contr))
### alternatively, define linear function for coef(amod)
### instead of contrasts for `tension'
### (take model contrasts and intercept into account)
glht(amod, linfct = cbind(0, contr %*% contr.treatment(3)))
### mix of one- and two-sided alternatives
warpbreaks.aov <- aov(breaks ~ wool + tension,
data = warpbreaks)
### contrasts for `tension'
K <- rbind("L - M" = c( 1, -1,  0),
"M - L" = c(-1,  1,  0),
"L - H" = c( 1,  0, -1),
"M - H" = c( 0,  1, -1))
warpbreaks.mc <- glht(warpbreaks.aov,
linfct = mcp(tension = K),
alternative = "less")
### correlation of first two tests is -1
cov2cor(vcov(warpbreaks.mc))
### use smallest of the two one-sided
### p-value as two-sided p-value -> 0.0232
summary(warpbreaks.mc)
fix(ex0328.queen.lm)
library("multcomp", lib.loc="C:/Users/Katie Jones/Documents/R/win-library/3.0")
x<-c("a", "b", "c", "c", "d", "a")
x
a[1]
x[1]
x[2]
x[1:4]
x[x>"a"]
u<-[x>"a"]
u<-[x>"a"]
u<-x>"a"
as.logical (u)
x<-matrix(1:6, 1,3)
View(x)
x<-matrix(1:6, 2,3)
x
view(x)
View(x)
print(x)
X[,2]
x[,2]
x[1,]
x[1,2]
x[1,2, drop=F]
x[1,]
x[1,,drop=f]
x[1,,drop=F]
x<-list(foo=1:4, bar=0.6)
x[1]
$foo
x[[1]]
x
x <- list(foo=1:4, bar=0.6, baz="hello")
name<-"foo"
x[[name]]
x$name
x$foo
x<-kust(a=list(10, 12, 14), b=c(3.14,2.81))
x<-list(a=list(10, 12, 14), b=c(3.14,2.81))
x<-list(aardvar=1:5)
x$a
x[["a",]]
x[["a"]]
x[["a", exact=F]]
x<-c(1,2,NA, 4, NA, 5)
bad <-is.na(x)
x[!bad]
bad
y<-c("a", "b", NA, "d", NA, "f")
good<-complete.case(x,y)
good<-complete.cases(x,y)
good
x[good]
y[good]
airquality
airquality [1:6, ]
good<complete.cases(airquality)
airquality [good, ][1:6]
airquality [good, ][1:6,]
x<-1:4; y<-6:9
x+y
>x>2
x>2
y==8
x*y
x/y
x<- matrix(1:4), 2, 2); y<-matrix(rep(10, 4), 2,2)
x<- matrix(1:4, 2, 2); y<-matrix(rep(10, 4), 2,2)
x*y
x
y
str(platform)
1440000000/(2^20)
1440000000/(2^20)/(2^10)
y<- data.frame (a=1, b=2)
y
dput(y)
dput(y, file="y.r")
new.y<-dget("y.r")
new.y
con<-gzfile("words.gs")
con<-gzfile("words.gz")
x<readLines(con, 10)
getwd()
setwd("~/Coursera - R")
myfunction <- function () (
x<- rmorm(100)
mean(x)
)
myfunction <- function (
x<- rmorm(100)
mean(x)
)
myfunction <- function ((
x<- rmorm(100)
mean(x)
)
myfunction <- function (
x<- rmorm(100)
mean(x))
)
x<- rnorm(100)
myfunction <- function (
x<- rnorm(100)
mean(x))
myfunction <- function (
x<- rnorm(100)
mean(x)
)
myfunction <- function () (
x<- rnorm(100)
mean(x)
)
myfunction <- function () (
x<- rnorm(100)
mean(x)
)
myfunction<- function()
( x<- rmorlm(100))
mean(x)
x
source('~/.active-rstudio-document')
source('~/Coursera - R/mycode.r')
myfunction
mean(x)
clear
str()
str(str)
x<- rnorm(100, 2, 4)
summary (x)
str(x)
x<-4L in R
x<-4L
class(x)
x<-(c(4, TRUE))
class(x)
x<-c(1,3,5);y<-c(3,2,10)
z<-cbind(x,y)
z
